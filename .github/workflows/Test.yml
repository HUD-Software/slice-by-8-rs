name: Test

on: [push, pull_request, workflow_dispatch]

env:
  CARGO_TERM_COLOR: always
  LLVM_PROFILE_FILE: "slice-by-8-%p-%m.profraw"

jobs:
  test-coverage-portable:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Cinstrument-coverage"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Rust
      run: |
          rustup toolchain add nightly --component llvm-tools-preview
          rustup override set nightly
          cargo install grcov
    - name: Build
      run: cargo build --release --verbose
    - name: Test
      run: cargo test --release --verbose
    - name: Generate coverage
      run: |
              grcov $(find . -name "slice-by-8-*.profraw" -print) \
              --branch \
              --ignore-not-existing \
              --binary-path ./target/release/ \
              -s . \
              -t lcov \
              --ignore "/*" \
              --ignore build.rs \
              -o lcov.info
    - name: Upload report to codecov
      uses: codecov/codecov-action@v2

  test-coverage-sse:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Ctarget-feature=+sse4.2 -Cinstrument-coverage"
      RUSTDOCFLAGS: "-Ctarget-feature=+sse4.2"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Rust
      run: |
          rustup toolchain add nightly --component llvm-tools-preview
          rustup override set nightly
          cargo install grcov
    - name: Build
      run: cargo build --release --verbose
    - name: Test
      run: cargo test --release --verbose
    - name: Generate coverage
      run: |
              grcov $(find . -name "slice-by-8-*.profraw" -print) \
              --branch \
              --ignore-not-existing \
              --binary-path ./target/release/ \
              -s . \
              -t lcov \
              --ignore "/*" \
              --ignore build.rs \
              -o lcov.info

  test-coverage-aarch64-crc:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Ctarget-feature=+crc -Cinstrument-coverage"
      RUSTDOCFLAGS: "-Ctarget-feature=+crc"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Rust
      run: |
          rustup toolchain add nightly --component llvm-tools-preview
          rustup override set nightly
          rustup target add aarch64-unknown-linux-gnu
          cargo install grcov
    - name: Build
      run: cargo build --target=aarch64-unknown-linux-gnu --release --verbose
    - name: Test
      run: cargo test --release --verbose
    - name: Generate coverage
      run: |
              grcov $(find . -name "slice-by-8-*.profraw" -print) \
              --branch \
              --ignore-not-existing \
              --binary-path ./target/release/ \
              -s . \
              -t lcov \
              --ignore "/*" \
              --ignore build.rs \
              -o lcov.info

  upload-to-codecov:
      runs-on: ubuntu-latest
      needs: [ test-coverage-portable, test-coverage-sse, test-coverage-aarch64-crc ]
      steps:
        - name: Checkout
          uses: actions/checkout@v2
